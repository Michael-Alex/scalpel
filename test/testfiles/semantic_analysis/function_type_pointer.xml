<namespace id="n0">
 <typedef name="fun_ptr_t">
  <type>
   <cv_qualified_type const="true">
    <pointer>
     <function_type>
      <return_type>
       <fundamental_type type="int"/>
      </return_type>
      <parameter_types>
      </parameter_types>
     </function_type>
    </pointer>
   </cv_qualified_type>
  </type>
 </typedef>
 <simple_function name="f">
  <return_type>
   <fundamental_type type="void"/>
  </return_type>
  <parameters>
   <parameter name="fun_ptr">
    <type>
     <pointer>
      <function_type>
       <return_type>
        <fundamental_type type="void"/>
       </return_type>
       <parameter_types>
        <fundamental_type type="int"/>
       </parameter_types>
      </function_type>
     </pointer>
    </type>
   </parameter>
  </parameters>
 </simple_function>
 <simple_function name="g" defined="false">
  <return_type>
   <fundamental_type type="void"/>
  </return_type>
  <parameters>
   <parameter>
    <type>
     <pointer>
      <function_type>
       <return_type>
        <fundamental_type type="int"/>
       </return_type>
       <parameter_types>
        <fundamental_type type="double"/>
       </parameter_types>
      </function_type>
     </pointer>
    </type>
   </parameter>
  </parameters>
 </simple_function>
 <variable name="fun_ptr">
  <type>
   <cv_qualified_type const="true">
    <pointer>
     <function_type>
      <return_type>
       <fundamental_type type="int"/>
      </return_type>
      <parameter_types>
      </parameter_types>
     </function_type>
    </pointer>
   </cv_qualified_type>
  </type>
 </variable>
 <variable name="fun_ptr2">
  <type>
   <cv_qualified_type const="true">
    <pointer>
     <function_type>
      <return_type>
       <fundamental_type type="int"/>
      </return_type>
      <parameter_types>
      </parameter_types>
     </function_type>
    </pointer>
   </cv_qualified_type>
  </type>
 </variable>
</namespace>
