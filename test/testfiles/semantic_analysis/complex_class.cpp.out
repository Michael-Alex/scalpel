<namespace id="0">
 <namespace name="n" id="1">
  <namespace name="n2" id="2">
   <class name="base1" id="0">
    <destructor access="public" defined="false">
    </destructor>
   </class>
  </namespace>
 </namespace>
 <class name="base2" id="1">
  <destructor access="public" defined="false">
  </destructor>
 </class>
 <class name="base3" id="2">
  <destructor access="public" defined="false">
  </destructor>
 </class>
 <class name="test" id="3">
  <base_classes>
   <base_class  class_id="0" access="public"/>
   <base_class  class_id="1" access="private" virtual="true"/>
   <base_class  class_id="2" access="protected" virtual="true"/>
  </base_classes>
  <constructor access="public">
   <parameters>
    <parameter name="t">
     <type>
      <reference>
       <cv_qualified_type const="true">
        <class id="3"/>
       </cv_qualified_type>
      </reference>
     </type>
    </parameter>
   </parameters>
  </constructor>
  <constructor access="public" explicit="true">
   <parameters>
    <parameter name="i">
     <type>
      <fundamental_type type="int"/>
     </type>
    </parameter>
   </parameters>
  </constructor>
  <destructor access="public" virtual="true">
  </destructor>
  <operator_member_function operator="new[]" access="public">
   <return_type>
    <pointer>
     <fundamental_type type="void"/>
    </pointer>
   </return_type>
   <parameters>
    <parameter>
     <type>
      <fundamental_type type="unsigned long int"/>
     </type>
    </parameter>
    <parameter>
     <type>
      <pointer>
       <fundamental_type type="void"/>
      </pointer>
     </type>
    </parameter>
   </parameters>
  </operator_member_function>
  <operator_member_function operator="delete[]" access="public">
   <return_type>
    <fundamental_type type="void"/>
   </return_type>
   <parameters>
    <parameter>
     <type>
      <pointer>
       <fundamental_type type="void"/>
      </pointer>
     </type>
    </parameter>
   </parameters>
  </operator_member_function>
  <operator_member_function operator="=" access="public">
   <return_type>
    <reference>
     <cv_qualified_type const="true">
      <class id="3"/>
     </cv_qualified_type>
    </reference>
   </return_type>
   <parameters>
    <parameter name="t">
     <type>
      <reference>
       <cv_qualified_type const="true">
        <class id="3"/>
       </cv_qualified_type>
      </reference>
     </type>
    </parameter>
   </parameters>
  </operator_member_function>
  <operator_member_function operator="==" access="public" const="true">
   <return_type>
    <fundamental_type type="bool"/>
   </return_type>
   <parameters>
    <parameter name="t">
     <type>
      <reference>
       <cv_qualified_type const="true">
        <class id="3"/>
       </cv_qualified_type>
      </reference>
     </type>
    </parameter>
   </parameters>
  </operator_member_function>
  <conversion_function access="public" const="true">
   <return_type>
    <fundamental_type type="int"/>
   </return_type>
  </conversion_function>
  <simple_member_function name="pure_virtual" access="public" virtual="true" pure="true">
   <return_type>
    <fundamental_type type="void"/>
   </return_type>
  </simple_member_function>
  <simple_member_function name="static_function" access="public" static="true">
   <return_type>
    <fundamental_type type="bool"/>
   </return_type>
  </simple_member_function>
  <simple_member_function name="update" access="protected" inline="true">
   <return_type>
    <fundamental_type type="void"/>
   </return_type>
  </simple_member_function>
  <simple_member_function name="value" access="public" inline="true" const="true">
   <return_type>
    <fundamental_type type="int"/>
   </return_type>
  </simple_member_function>
  <member_variable name="b" access="private" static="true">
   <type>
    <cv_qualified_type const="true">
     <fundamental_type type="bool"/>
    </cv_qualified_type>
   </type>
  </member_variable>
  <member_variable name="value_" access="private">
   <type>
    <fundamental_type type="int"/>
   </type>
  </member_variable>
 </class>
</namespace>
